var p5_3d_sketch = function (p) {

    let gray_color_scale = [23, 46, 69, 92, 115, 139, 162, 185, 208, 231]

    const scrollProperties = {
        y: 0,
        spd: null
    };

    let drawCount = 0;

    let data = [];

    let playHeadx = -250;
    let playHeady = -250;

    let x = 0;
    let y = 0;
    let z = 0;
    let easing = 0.9;

    let canvas;

    class DataPoint {
        constructor() {
            this.pos = p.createVector(0, 0, 0);
            this.label = "";
            this.color = p.color(255);
            this.size = 1;
            this.trig = 0;
            this.canTrig = true;
        }

        drawPoint() {
            p.noStroke();
            p.fill(this.color);
            // ambientMaterial(this.color);
            p.specularMaterial(this.color);
            p.push();
            p.translate(this.pos.x, this.pos.y, this.pos.z);
            //rotateX(this.size,0,0);
            p.sphere(this.size * 0.5);
            p.pop();
            // noFill();
            // sphere(this.size/2);

            // fill(255, 0, 0, this.trig);
            p.push();
            p.translate(this.pos.x, this.pos.y, this.pos.z);
            p.noFill();
            p.stroke(20, 100);
            p.box(this.size * 1.25);


            p.pop();


        }

        setPos(pos) {
            this.pos = pos;
            return this;
        }

        setCol(color) {
            this.color = color;
            return this;
        }

        setSize(s) {
            this.size = s;
            return this;
        }
    }

    p.setup = () => {


        canvas = p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL);
        p.smooth();

        json_data.forEach( (tweet, idx) => {
            let coords = tweet.tsne_coords;
            let color = gray_color_scale[tweet.topic];
            let d = new DataPoint();
            // use data as color components for the datapoints
            d.setCol(color).setSize(5);
            d.setPos(p.createVector(coords[0] * 10, coords[1] * 10, coords[2] * 10));
            data.push(d);
        });

    }

    p.draw = () => {

        let targetX = p.map(p.mouseX, 0, p.width, -200, 200);
        let dx = targetX - x;
        x += dx * easing;

        let targetY = p.map(p.mouseY, 0, p.height, -200, 200);
        let dy = targetY - y;
        y += dy * easing;

        let targetZ = scrollProperties.y;
        let dz = targetZ - z;
        z += dz * easing;

        p.clear();
        // p.background('rgba(255,255,255, 1)');

        p.camera(p.sin(p.frameCount / 300) * 100 + x, p.cos(p.frameCount / 300) * 100 + y, 400 - z, 0, 0, 0, 0, 1, 0);


        // p.directionalLight(255,255,255, -1, 0, -1);
        // p.ambientLight(255);

        let dirX = (p.mouseX / p.width - 0.5) * 2;
        let dirY = (p.mouseY / p.height - 0.5) * 2;
        p.directionalLight(250, 250, 250, p.sin(p.frameCount / 300), p.sin(p.frameCount / 300), -1);

        p.rotateY(p.sin(p.frameCount / 1000) * p.PI / 4);
        p.rotateX(-p.frameCount / 1000);


        data.forEach(point => {
            point.drawPoint();
        });

        // p.noFill();
        // p.stroke(50, 50);
        // p.box(500);

    }

    p.mouseWheel = (event) => {
        scrollProperties.y -= event.deltaY / Math.abs(event.deltaY) * 5;
        scrollProperties.y = p.constrain(scrollProperties.y, 0, 500)
        //uncomment to block page scrolling
        return false;
    }


    // p.keyPressed = () => {
    //     if (p.key === 's') {
    //         p.saveCanvas(canvas, 'myCanvas', 'jpg');
    //     }

    //     return false; // prevent any default behaviour
    // }

}